import numpy as np
from scipy.integrate import odeint
import matplotlib.pyplot as plt
from matplotlib.animation import ArtistAnimation

# Решение задачи на упругое столкновение тел

# Временные интервалы
seconds_in_year = 365 * 24 * 60 * 60
seconds_in_day = 24 * 60 * 60
years =55

# Определяем переменную величину
t = np.arange(0, years*seconds_in_year,60*seconds_in_day)

# Определяем функцию для системы диф. уравнений
def move_func(s, t):
    
    (x1, v_x1, y1, v_y1,
     x2, v_x2, y2, v_y2,
     x3, v_x3, y3, v_y3,
     x4, v_x4, y4, v_y4,
     x5, v_x5, y5, v_y5,
     x6, v_x6, y6, v_y6,
     x7, v_x7, y7, v_y7,
     x8, v_x8, y8, v_y8,
     x9, v_x9, y9, v_y9,
     x10, v_x10, y10, v_y10)=s
     
     
     
    dxdt1 = v_x1
    dv_xdt1 = - G * m2 * (x1 - x2) / ((x1 - x2)**2 + (y1 - y2)**2)**1.5\
    - G * m3 * (x1 - x3) / ((x1 - x3)**2 + (y1 - y3)**2)**1.5\
    - G * m4 * (x1 - x4) / ((x1 - x4)**2 + (y1 - y4)**2)**1.5\
    - G * m5 * (x1 - x5) / ((x1 - x5)**2 + (y1 - y5)**2)**1.5\
    - G * m6 * (x1 - x6) / ((x1 - x6)**2 + (y1 - y6)**2)**1.5\
    - G * m7 * (x1 - x7) / ((x1 - x7)**2 + (y1 - y7)**2)**1.5\
    - G * m8 * (x1 - x8) / ((x1 - x8)**2 + (y1 - y8)**2)**1.5\
    - G * m9 * (x1 - x9) / ((x1 - x9)**2 + (y1 - y9)**2)**1.5\
    - G * m10 * (x1 - x10) / ((x1 - x10)**2 + (y1 - y10)**2)**1.5
    
    dydt1 = v_y1
    dv_ydt1 = - G * m2 * (y1 - y2) / ((x1 - x2)**2 + (y1 - y2)**2)**1.5\
    -G * m3 * (y1 - y3) / ((x1 - x3)**2 + (y1 - y3)**2)**1.5\
    - G * m4 * (y1 - y4) / ((x1 - x4)**2 + (y1 - y4)**2)**1.5\
    - G * m5 * (y1 - y5) / ((x1 - x5)**2 + (y1 - y5)**2)**1.5\
    - G * m6 * (y1 - y6) / ((x1 - x6)**2 + (y1 - y6)**2)**1.5\
    - G * m7 * (y1 - y7) / ((x1 - x7)**2 + (y1 - y7)**2)**1.5\
    - G * m8 * (y1 - y8) / ((x1 - x8)**2 + (y1 - y8)**2)**1.5\
    - G * m9 * (y1 - y9) / ((x1 - x9)**2 + (y1 - y9)**2)**1.5\
    - G * m10 * (y1 - y10) / ((x1 - x10)**2 + (y1 - y10)**2)**1.5




    dxdt2 = v_x2
    dv_xdt2 = - G * m1 * (x2 - x1) / ((x2 - x1)**2 + (y2 - y1)**2)**1.5\
    - G * m3 * (x2 - x3) / ((x2 - x3)**2 + (y2 - y3)**2)**1.5\
    - G * m4 * (x2 - x4) / ((x2 - x4)**2 + (y2 - y4)**2)**1.5\
    - G * m5 * (x2 - x5) / ((x2 - x5)**2 + (y2 - y5)**2)**1.5\
    - G * m6 * (x2 - x6) / ((x2 - x6)**2 + (y2 - y6)**2)**1.5\
    - G * m7 * (x2 - x7) / ((x2 - x7)**2 + (y2 - y7)**2)**1.5\
    - G * m8 * (x2 - x8) / ((x2 - x8)**2 + (y2 - y8)**2)**1.5\
    - G * m9 * (x2 - x9) / ((x2 - x9)**2 + (y2 - y9)**2)**1.5\
    - G * m10 * (x2 - x10) / ((x2 - x10)**2 + (y2 - y10)**2)**1.5
    
    dydt2 = v_y2
    dv_ydt2 = - G * m1 * (y2 - y1) / ((x2 - x1)**2 + (y2 - y1)**2)**1.5\
    - G * m3 * (y2 - y3) / ((x2 - x3)**2 + (y2 - y3)**2)**1.5\
    - G * m4 * (y2 - y4) / ((x2 - x4)**2 + (y2 - y4)**2)**1.5\
    - G * m5 * (y2 - y5) / ((x2 - x5)**2 + (y2 - y5)**2)**1.5\
    - G * m6 * (y2 - y6) / ((x2 - x6)**2 + (y2 - y6)**2)**1.5\
    - G * m7 * (y2 - y7) / ((x2 - x7)**2 + (y2 - y7)**2)**1.5\
    - G * m8 * (y2 - y8) / ((x2 - x8)**2 + (y2 - y8)**2)**1.5\
    - G * m9 * (y2 - y9) / ((x2 - x9)**2 + (y2 - y9)**2)**1.5\
    - G * m10 * (y2 - y10) / ((x2 - x10)**2 + (y2 - y10)**2)**1.5
    
    
    

    dxdt3 = v_x3
    dv_xdt3 = - G * m1 * (x3 - x1) / ((x3 - x1)**2 + (y3 - y1)**2)**1.5\
    - G * m2 * (x3 - x2) / ((x3 - x2)**2 + (y3 - y2)**2)**1.5\
    - G * m4 * (x3 - x4) / ((x3 - x4)**2 + (y3 - y4)**2)**1.5\
    - G * m5 * (x3 - x5) / ((x3 - x5)**2 + (y3 - y5)**2)**1.5\
    - G * m6 * (x3 - x6) / ((x3 - x6)**2 + (y3 - y6)**2)**1.5\
    - G * m7 * (x3 - x7) / ((x3 - x7)**2 + (y3 - y7)**2)**1.5\
    - G * m8 * (x3 - x8) / ((x3 - x8)**2 + (y3 - y8)**2)**1.5\
    - G * m9 * (x3 - x9) / ((x3 - x9)**2 + (y3 - y9)**2)**1.5\
    - G * m10 * (x3 - x10) / ((x3 - x10)**2 + (y3 - y10)**2)**1.5
    
    dydt3 = v_y3
    dv_ydt3 = - G * m1 * (y3 - y1) / ((x3 - x1)**2 + (y3 - y1)**2)**1.5\
    - G * m2 * (y3 - y2) / ((x3 - x2)**2 + (y3 - y2)**2)**1.5\
    - G * m4 * (y3 - y4) / ((x3 - x4)**2 + (y3 - y4)**2)**1.5\
    - G * m5 * (y3 - y5) / ((x3 - x5)**2 + (y3 - y5)**2)**1.5\
    - G * m6 * (y3 - y6) / ((x3 - x6)**2 + (y3 - y6)**2)**1.5\
    - G * m7 * (y3 - y7) / ((x3 - x7)**2 + (y3 - y7)**2)**1.5\
    - G * m8 * (y3 - y8) / ((x3 - x8)**2 + (y3 - y8)**2)**1.5\
    - G * m9 * (y3 - y9) / ((x3 - x9)**2 + (y3 - y9)**2)**1.5\
    - G * m10 * (y3 - y10) / ((x3 - x10)**2 + (y3 - y10)**2)**1.5
    
    
    
    
    
    
    dxdt4 = v_x4
    dv_xdt4 = - G * m1 * (x4 - x1) / ((x4 - x1)**2 + (y4 - y1)**2)**1.5\
    - G * m2 * (x4 - x2) / ((x4 - x2)**2 + (y4 - y2)**2)**1.5\
    - G * m3 * (x4 - x3) / ((x4 - x3)**2 + (y4 - y3)**2)**1.5\
    - G * m3 * (y4 - y3) / ((x4 - x3)**2 + (y4 - y3)**2)**1.5\
    - G * m5 * (x4 - x5) / ((x4 - x5)**2 + (y4 - y5)**2)**1.5\
    - G * m6 * (x4 - x6) / ((x4 - x6)**2 + (y4 - y6)**2)**1.5\
    - G * m7 * (x4 - x7) / ((x4 - x7)**2 + (y4 - y7)**2)**1.5\
    - G * m8 * (x4 - x8) / ((x4 - x8)**2 + (y4 - y8)**2)**1.5\
    - G * m9 * (x4 - x9) / ((x4 - x9)**2 + (y4 - y9)**2)**1.5\
    - G * m10 * (x4 - x10) / ((x4 - x10)**2 + (y4 - y10)**2)**1.5
    dydt4 = v_y4
    dv_ydt4 = - G * m1 * (y4 - y1) / ((x4 - x1)**2 + (y4 - y1)**2)**1.5\
    - G * m2 * (y4 - y2) / ((x4 - x2)**2 + (y4 - y2)**2)**1.5\
    - G * m5 * (y4 - y5) / ((x4 - x5)**2 + (y4 - y5)**2)**1.5\
    - G * m6 * (y4 - y6) / ((x4 - x6)**2 + (y4 - y6)**2)**1.5\
    - G * m7 * (y4 - y7) / ((x4 - x7)**2 + (y4 - y7)**2)**1.5\
    - G * m8 * (y4 - y8) / ((x4 - x8)**2 + (y4 - y8)**2)**1.5\
    - G * m9 * (y4 - y9) / ((x4 - x9)**2 + (y4 - y9)**2)**1.5\
    - G * m10 * (y4 - y10) / ((x4 - x10)**2 + (y4 - y10)**2)**1.5
    
    
    

    
    dxdt5 = v_x5
    dv_xdt5 = - G * m1 * (x5 - x1) / ((x5 - x1)**2 + (y5 - y1)**2)**1.5\
    - G * m2 * (x5 - x2) / ((x5 - x2)**2 + (y5 - y2)**2)**1.5\
    - G * m3 * (x5 - x3) / ((x5 - x3)**2 + (y5 - y3)**2)**1.5\
    - G * m4 * (x5 - x4) / ((x5 - x4)**2 + (y5 - y4)**2)**1.5\
    - G * m6 * (x5 - x6) / ((x5 - x6)**2 + (y5 - y6)**2)**1.5\
    - G * m7 * (x5 - x7) / ((x5 - x7)**2 + (y5 - y7)**2)**1.5\
    - G * m8 * (x5 - x8) / ((x5 - x8)**2 + (y5 - y8)**2)**1.5\
    - G * m9 * (x5 - x9) / ((x5 - x9)**2 + (y5 - y9)**2)**1.5\
    - G * m10 * (x5 - x10) / ((x5 - x10)**2 + (y5 - y10)**2)**1.5
    dydt5 = v_y5
    dv_ydt5 = - G * m1 * (y5 - y1) / ((x5 - x1)**2 + (y5 - y1)**2)**1.5\
    - G * m2 * (y5 - y2) / ((x5 - x2)**2 + (y5 - y2)**2)**1.5\
    - G * m3 * (y5 - y3) / ((x5 - x3)**2 + (y5 - y3)**2)**1.5\
    - G * m4 * (y5 - y4) / ((x5 - x4)**2 + (y5 - y4)**2)**1.5\
    - G * m6 * (y5 - y6) / ((x5 - x6)**2 + (y5 - y6)**2)**1.5\
    - G * m7 * (y5 - y7) / ((x5 - x7)**2 + (y5 - y7)**2)**1.5\
    - G * m8 * (y5 - y8) / ((x5 - x8)**2 + (y5 - y8)**2)**1.5\
    - G * m9 * (y5 - y9) / ((x5 - x9)**2 + (y5 - y9)**2)**1.5\
    - G * m10 * (y5 - y10) / ((x5 - x10)**2 + (y5 - y10)**2)**1.5
    
    
    
    

    dxdt6 = v_x6
    dv_xdt6 = - G * m1 * (x6 - x1) / ((x6 - x1)**2 + (y6 - y1)**2)**1.5\
    - G * m2 * (x6 - x2) / ((x6 - x2)**2 + (y6 - y2)**2)**1.5\
    - G * m3 * (x6 - x3) / ((x6 - x3)**2 + (y6 - y3)**2)**1.5\
    - G * m4 * (x6 - x4) / ((x6 - x4)**2 + (y6 - y4)**2)**1.5\
    - G * m5 * (x6 - x5) / ((x6 - x5)**2 + (y6 - y5)**2)**1.5\
    - G * m7 * (x6 - x7) / ((x6 - x7)**2 + (y6 - y7)**2)**1.5\
    - G * m8 * (x6 - x8) / ((x6 - x8)**2 + (y6 - y8)**2)**1.5\
    - G * m9 * (x6 - x9) / ((x6 - x9)**2 + (y6 - y9)**2)**1.5\
    - G * m10 * (x6 - x10) / ((x6 - x10)**2 + (y6 - y10)**2)**1.5
    
    dydt6 = v_y6
    dv_ydt6 = - G * m1 * (y6 - y1) / ((x6 - x1)**2 + (y6 - y1)**2)**1.5\
    - G * m2 * (y6 - y2) / ((x6 - x2)**2 + (y6 - y2)**2)**1.5\
    - G * m3 * (y6 - y3) / ((x6 - x3)**2 + (y6 - y3)**2)**1.5\
    - G * m4 * (y6 - y4) / ((x6 - x4)**2 + (y6 - y4)**2)**1.5\
    - G * m5 * (y6 - y5) / ((x6 - x5)**2 + (y6 - y5)**2)**1.5\
    - G * m7 * (y6 - y7) / ((x6 - x7)**2 + (y6 - y7)**2)**1.5\
    - G * m8 * (y6 - y8) / ((x6 - x8)**2 + (y6 - y8)**2)**1.5\
    - G * m9 * (y6 - y9) / ((x6 - x9)**2 + (y6 - y9)**2)**1.5\
    - G * m10 * (y6 - y10) / ((x6 - x10)**2 + (y6 - y10)**2)**1.5
    
    
    
    
    
    dxdt7 = v_x7
    dv_xdt7 = - G * m1 * (x7 - x1) / ((x7 - x1)**2 + (y7 - y1)**2)**1.5\
    - G * m2 * (x7 - x2) / ((x7 - x2)**2 + (y7 - y2)**2)**1.5\
    - G * m3 * (x7 - x3) / ((x7 - x3)**2 + (y7 - y3)**2)**1.5\
    - G * m4 * (x7 - x4) / ((x7 - x4)**2 + (y7 - y4)**2)**1.5\
    - G * m5 * (x7 - x5) / ((x7 - x5)**2 + (y7 - y5)**2)**1.5\
    - G * m6 * (x7 - x6) / ((x7 - x6)**2 + (y7 - y6)**2)**1.5\
    - G * m8 * (x7 - x8) / ((x7 - x8)**2 + (y7 - y8)**2)**1.5\
    - G * m9 * (x7 - x9) / ((x7 - x9)**2 + (y6 - y9)**2)**1.5\
    - G * m10 * (x7 - x10) / ((x7 - x10)**2 + (y7 - y10)**2)**1.5
    
    dydt7 = v_y7
    dv_ydt7 = - G * m1 * (y7 - y1) / ((x7 - x1)**2 + (y7 - y1)**2)**1.5\
    - G * m2 * (y7 - y2) / ((x7 - x2)**2 + (y7 - y2)**2)**1.5\
    - G * m3 * (y7 - y3) / ((x7 - x3)**2 + (y7 - y3)**2)**1.5\
    - G * m4 * (y7 - y4) / ((x7 - x4)**2 + (y7 - y4)**2)**1.5\
    - G * m5 * (y7 - y5) / ((x7 - x5)**2 + (y7 - y5)**2)**1.5\
    - G * m6 * (y7 - y6) / ((x7 - x6)**2 + (y7 - y6)**2)**1.5\
    - G * m8 * (y7 - y8) / ((x7 - x8)**2 + (y7 - y8)**2)**1.5\
    - G * m9 * (y7 - y9) / ((x7 - x9)**2 + (y7 - y9)**2)**1.5\
    - G * m10 * (y7 - y10) / ((x7 - x10)**2 + (y7 - y10)**2)**1.5
    
    
    
    
    dxdt8 = v_x8
    dv_xdt8 = - G * m1 * (x8 - x1) / ((x8 - x1)**2 + (y8 - y1)**2)**1.5\
    - G * m2 * (x8 - x2) / ((x8 - x2)**2 + (y8 - y2)**2)**1.5\
    - G * m3 * (x8 - x3) / ((x8 - x3)**2 + (y8 - y3)**2)**1.5\
    - G * m4 * (x8 - x4) / ((x8 - x4)**2 + (y8 - y4)**2)**1.5\
    - G * m5 * (x8 - x5) / ((x8 - x5)**2 + (y8 - y5)**2)**1.5\
    - G * m6 * (x8 - x6) / ((x8 - x6)**2 + (y8 - y6)**2)**1.5\
    - G * m7 * (x8 - x7) / ((x8 - x7)**2 + (y8 - y7)**2)**1.5\
    - G * m9 * (x8 - x9) / ((x8 - x9)**2 + (y8 - y9)**2)**1.5\
    - G * m10 * (x8 - x10) / ((x8 - x10)**2 + (y8 - y10)**2)**1.5
    
    dydt8 = v_y8
    dv_ydt8 = - G * m1 * (y8 - y1) / ((x8 - x1)**2 + (y8 - y1)**2)**1.5\
    - G * m2 * (y8 - y2) / ((x8 - x2)**2 + (y8 - y2)**2)**1.5\
    - G * m3 * (y8 - y3) / ((x8 - x3)**2 + (y8 - y3)**2)**1.5\
    - G * m4 * (y8 - y4) / ((x8 - x4)**2 + (y8 - y4)**2)**1.5\
    - G * m5 * (y8 - y5) / ((x8 - x5)**2 + (y8 - y5)**2)**1.5\
    - G * m6 * (y8 - y6) / ((x8 - x6)**2 + (y8 - y6)**2)**1.5\
    - G * m7 * (y8 - y7) / ((x8 - x7)**2 + (y8 - y7)**2)**1.5\
    - G * m9 * (y8 - y9) / ((x8 - x9)**2 + (y8 - y9)**2)**1.5\
    - G * m10 * (y8 - y10) / ((x8 - x10)**2 + (y8 - y10)**2)**1.5
    
    
    
    
    
    
    dxdt9 = v_x9
    dv_xdt9 = - G * m1 * (x9 - x1) / ((x9 - x1)**2 + (y9 - y1)**2)**1.5\
    - G * m2 * (x9 - x2) / ((x9 - x2)**2 + (y9 - y2)**2)**1.5\
    - G * m3 * (x9 - x3) / ((x9 - x3)**2 + (y9 - y3)**2)**1.5\
    - G * m4 * (x9 - x4) / ((x9 - x4)**2 + (y9 - y4)**2)**1.5\
    - G * m5 * (x9 - x5) / ((x9 - x5)**2 + (y9 - y5)**2)**1.5\
    - G * m6 * (x9 - x6) / ((x9 - x6)**2 + (y9 - y6)**2)**1.5\
    - G * m7 * (x9 - x7) / ((x9 - x7)**2 + (y9 - y7)**2)**1.5\
    - G * m8 * (x9 - x8) / ((x9 - x8)**2 + (y9 - y8)**2)**1.5\
    - G * m10 * (x9 - x10) / ((x9 - x10)**2 + (y9 - y10)**2)**1.5
    
    dydt9 = v_y9
    dv_ydt9 = - G * m1 * (y9 - y1) / ((x9 - x1)**2 + (y9 - y1)**2)**1.5\
    - G * m2 * (y9 - y2) / ((x9 - x2)**2 + (y9 - y2)**2)**1.5\
    - G * m3 * (y9 - y3) / ((x9 - x3)**2 + (y9 - y3)**2)**1.5\
    - G * m4 * (y9 - y4) / ((x9 - x4)**2 + (y9 - y4)**2)**1.5\
    - G * m5 * (y9 - y5) / ((x9 - x5)**2 + (y9 - y5)**2)**1.5\
    - G * m6 * (y9 - y6) / ((x9 - x6)**2 + (y9 - y6)**2)**1.5\
    - G * m7 * (y9 - y7) / ((x9 - x7)**2 + (y9 - y7)**2)**1.5\
    - G * m8 * (y9 - y8) / ((x9 - x8)**2 + (y9 - y8)**2)**1.5\
    - G * m10 * (y9 - y10) / ((x9 - x10)**2 + (y9 - y10)**2)**1.5
    
    
    
    
    
    
    
    dxdt10 = v_x10
    dv_xdt10 = - G * m1 * (x10 - x1) / ((x10 - x1)**2 + (y10 - y1)**2)**1.5\
    - G * m2 * (x10 - x2) / ((x10 - x2)**2 + (y10 - y2)**2)**1.5\
    - G * m3 * (x10 - x3) / ((x10 - x3)**2 + (y10 - y3)**2)**1.5\
    - G * m4 * (x10 - x4) / ((x10 - x4)**2 + (y10 - y4)**2)**1.5\
    - G * m5 * (x10 - x5) / ((x10 - x5)**2 + (y10 - y5)**2)**1.5\
    - G * m6 * (x10 - x6) / ((x10 - x6)**2 + (y10 - y6)**2)**1.5\
    - G * m7 * (x10 - x7) / ((x10 - x7)**2 + (y10 - y7)**2)**1.5\
    - G * m8 * (x10 - x8) / ((x10 - x8)**2 + (y10 - y8)**2)**1.5\
    - G * m9 * (x10 - x9) / ((x10 - x9)**2 + (y10 - y9)**2)**1.5
    
    dydt10 = v_y10
    dv_ydt10 = - G * m1 * (y10 - y1) / ((x10 - x1)**2 + (y10 - y1)**2)**1.5\
    - G * m2 * (y10 - y2) / ((x10 - x2)**2 + (y10 - y2)**2)**1.5\
    - G * m3 * (y10 - y3) / ((x10 - x3)**2 + (y10 - y3)**2)**1.5\
    - G * m4 * (y10 - y4) / ((x10 - x4)**2 + (y10 - y4)**2)**1.5\
    - G * m5 * (y10 - y5) / ((x10 - x5)**2 + (y10 - y5)**2)**1.5\
    - G * m6 * (y10 - y6) / ((x10 - x6)**2 + (y10 - y6)**2)**1.5\
    - G * m7 * (y10 - y7) / ((x10 - x7)**2 + (y10 - y7)**2)**1.5\
    - G * m8 * (y10 - y8) / ((x10 - x8)**2 + (y10 - y8)**2)**1.5\
    - G * m9 * (y10 - y9) / ((x10 - x9)**2 + (y10 - y9)**2)**1.5

    
    
    
    

    
    

    return (dxdt1, dv_xdt1, dydt1, dv_ydt1,
            dxdt2, dv_xdt2, dydt2, dv_ydt2,
            dxdt3, dv_xdt3, dydt3, dv_ydt3,
            dxdt4, dv_xdt4, dydt4, dv_ydt4,
            dxdt5, dv_xdt5, dydt5, dv_ydt5,
            dxdt6, dv_xdt6, dydt6, dv_ydt6,
            dxdt7, dv_xdt7, dydt7, dv_ydt7,
            dxdt8, dv_xdt8, dydt8, dv_ydt8,
            dxdt9, dv_xdt9, dydt9, dv_ydt9,
            dxdt10, dv_xdt10, dydt10, dv_ydt10,)
#1-Меркурий
#2-Венера
#3-Земля
#4-Марс
#5-Юпитер
#6-Сатурн
#7-Уран
#8-Нептун
#9-Астероид 
#10-Солнце
    

# Определяем начальные значения и параметры


x10 = 59*10**9
v_x10 =0
y10 = 0
v_y10 = 48748

x20 =108*10**9
v_x20 = 0
y20 = 0
v_y20 = 34833

x30=149.6*10**9
v_x30=0
y30=0
v_y30= 28850

x40=228*10**9
v_x40=0
y40=0
v_y40=24133

x50=778.5*10**9
v_x50=0
y50=0
v_y50=13059

x60=1.43*10**12
v_x60=0
y60=0
v_y60=9658

x70=2.87*10**12
v_x70=0
y70=0
v_y70=6792

x80=4.5*10**12
v_x80=0
y80=0
v_y80=4500 

x90=4.5*10**12
v_x90=-2800
y90=3*10**12
v_y90=-0

x100=0
v_x100=0
y100=0
v_y100=0

s0 = (x10, v_x10, y10, v_y10,
      x20, v_x20, y20, v_y20,
      x30, v_x30, y30, v_y30,
      x40, v_x40, y40, v_y40,
      x50, v_x50, y50, v_y50,
      x60, v_x60, y60, v_y60,
      x70, v_x70, y70, v_y70,
      x80, v_x80, y80, v_y80,
      x90, v_x90, y90, v_y90,
      x100, v_x100, y100, v_y100,)
      

m1 =3.3*10**23
m2 = 4.9*10**24
m3 = 6*10**24
m4 = 6.4*10**23
m5 = 1.9*10**27
m6 =  5.7*10**26
m7 = 8.7*10**25
m8 = 10**26
m9 =2*10**29
m10 = 2*10**30
G = 6.67 * 10**(-11)


sol = odeint(move_func, s0, t)


             
             
fig = plt.figure(figsize=(30,30), dpi=100)

bodys = []

for i in range(0, len(t), 1):
    body1, = plt.plot(sol[i, 0], sol[i, 2], 'o', color='peru', ms=1.5)
    # body1_line, = plt.plot(move_array[:i, 0], move_array[:i, 1], '-', color='r')

    body2, = plt.plot(sol[i, 4], sol[i, 6], 'o', color='r', ms=3.1)
    # body2_line, = plt.plot(move_array[:i, 2], move_array[:i, 3], '-', color='g')

    body3, = plt.plot(sol[i, 8], sol[i, 10], 'o', color='b', ms=3.1)
    # body2_line, = plt.plot(move_array[:i, 2], move_array[:i, 3], '-', color='g')
    
    body4, = plt.plot(sol[i, 12], sol[i, 14], 'o', color='r',ms=3)
                      
                      
    body5, = plt.plot(sol[i, 16], sol[i, 18], 'o', color='r', ms= 5.5)
    
    
    body6, = plt.plot(sol[i, 20], sol[i, 22], 'o', color='r', ms=5)
    
    
    body7, = plt.plot(sol[i, 24], sol[i, 26], 'o', color='b', ms=5)
    
    
    body8, = plt.plot(sol[i, 28], sol[i, 30], 'o', color='m', ms=5)
    
    
    body9, = plt.plot(sol[i, 32], sol[i, 34], 'o', color='r', ms=2.5)
    
    
    body10, = plt.plot(sol[i, 36], sol[i, 38], 'o', color='y', ms=9)
                      

    bodys.append([body1, body2, body3, body4, body5, body6, body7, body8, body9, body10])

ani = ArtistAnimation(fig, bodys, interval=0.07 )

plt.axis('equal')

ani.save('Пнананан .gif')
plt.show()

             
             
             
             
             
             
             
             
             
             
             
             
             
             
             
             
             
             
             
             
             
             
             
             
             